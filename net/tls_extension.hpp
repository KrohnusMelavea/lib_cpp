#pragma once

#include "types.hpp"
#include <array>
#include <string_view>

/* Taken from: https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml */

namespace net {
 enum class tls_extension : u16 {
  server_name                            = 0x0000,
  max_fragment_length                    = 0x0001,
  client_certificate_url                 = 0x0002,
  trusted_ca_keys                        = 0x0003,
  truncated_hmac                         = 0x0004,
  status_request                         = 0x0005,
  user_mapping                           = 0x0006,
  client_authz                           = 0x0007,
  server_authz                           = 0x0008,
  cert_type                              = 0x0009,
  supported_groups                       = 0x000a,
  ec_point_formats                       = 0x000b,
  srp                                    = 0x000c,
  signature_algorithms                   = 0x000d,
  use_srtp                               = 0x000e,
  heartbeat                              = 0x000f,
  application_layer_protocol_negotiation = 0x0010,
  status_request_v2                      = 0x0011,
  signed_certificate_timestamp           = 0x0012,
  client_certificate_type                = 0x0013,
  server_certificate_type                = 0x0014,
  padding                                = 0x0015,
  encrypt_then_mac                       = 0x0016,
  extended_master_secret                 = 0x0017,
  token_binding                          = 0x0018,
  cached_info                            = 0x0019,
  tls_lts                                = 0x001a,
  compress_certificate                   = 0x001b,
  record_size_limit                      = 0x001c,
  pwd_protect                            = 0x001d,
  pwd_clear                              = 0x001e,
  password_salt                          = 0x001f,
  ticket_pinning                         = 0x0020,
  tls_cert_with_extern_psk               = 0x0021,
  delegated_credential                   = 0x0022,
  session_ticket                         = 0x0023,
  tlmsp                                  = 0x0024,
  tlmsp_proxying                         = 0x0025,
  tlmsp_delegate                         = 0x0026,
  supported_ekt_ciphers                  = 0x0027,
  pre_shared_key                         = 0x0029,
  early_data                             = 0x002a,
  supported_versions                     = 0x002b,
  cookie                                 = 0x002c,
  psk_key_exchange_modes                 = 0x002d,
  certificate_authorities                = 0x002f,
  oid_filters                            = 0x0030,
  post_handshake_auth                    = 0x0031,
  signature_algorithms_cert              = 0x0032,
  key_share                              = 0x0033,
  transparency_info                      = 0x0034,
  connection_id_deprecated               = 0x0035,
  connection_id                          = 0x0036,
  external_id_hash                       = 0x0037,
  external_session_id                    = 0x0038,
  quic_transport_parameters              = 0x0039,
  ticket_request                         = 0x003a,
  dnssec_chain                           = 0x003b,
  sequence_number_encryption_algorithms  = 0x003c,
  rrc                                    = 0x003d,
  ech_outer_extensions                   = 0xfd00,
  encrypted_client_hello                 = 0xfe0d,
  renegotiation_info                     = 0xff01,
 };

 inline constexpr std::array<std::pair<tls_extension, std::string_view>, 63> TLS_EXTENSION_LOOKUP {
  std::pair<tls_extension, std::string_view>{ tls_extension::server_name                            , "tls::extension::server_name" },
  std::pair<tls_extension, std::string_view>{ tls_extension::max_fragment_length                    , "tls::extension::max_fragment_length" },
  std::pair<tls_extension, std::string_view>{ tls_extension::client_certificate_url                 , "tls::extension::client_certificate_url" },
  std::pair<tls_extension, std::string_view>{ tls_extension::trusted_ca_keys                        , "tls::extension::trusted_ca_keys" },
  std::pair<tls_extension, std::string_view>{ tls_extension::truncated_hmac                         , "tls::extension::truncated_hmac" },
  std::pair<tls_extension, std::string_view>{ tls_extension::status_request                         , "tls::extension::status_request" },
  std::pair<tls_extension, std::string_view>{ tls_extension::user_mapping                           , "tls::extension::user_mapping" },
  std::pair<tls_extension, std::string_view>{ tls_extension::client_authz                           , "tls::extension::client_authz" },
  std::pair<tls_extension, std::string_view>{ tls_extension::server_authz                           , "tls::extension::server_authz" },
  std::pair<tls_extension, std::string_view>{ tls_extension::cert_type                              , "tls::extension::cert_type" },
  std::pair<tls_extension, std::string_view>{ tls_extension::supported_groups                       , "tls::extension::supported_groups" },
  std::pair<tls_extension, std::string_view>{ tls_extension::ec_point_formats                       , "tls::extension::ec_point_formats" },
  std::pair<tls_extension, std::string_view>{ tls_extension::srp                                    , "tls::extension::srp" },
  std::pair<tls_extension, std::string_view>{ tls_extension::signature_algorithms                   , "tls::extension::signature_algorithms" },
  std::pair<tls_extension, std::string_view>{ tls_extension::use_srtp                               , "tls::extension::use_srtp" },
  std::pair<tls_extension, std::string_view>{ tls_extension::heartbeat                              , "tls::extension::heartbeat" },
  std::pair<tls_extension, std::string_view>{ tls_extension::application_layer_protocol_negotiation , "tls::extension::application_layer_protocol_negotiation" },
  std::pair<tls_extension, std::string_view>{ tls_extension::status_request_v2                      , "tls::extension::status_request_v2" },
  std::pair<tls_extension, std::string_view>{ tls_extension::signed_certificate_timestamp           , "tls::extension::signed_certificate_timestamp" },
  std::pair<tls_extension, std::string_view>{ tls_extension::client_certificate_type                , "tls::extension::client_certificate_type" },
  std::pair<tls_extension, std::string_view>{ tls_extension::server_certificate_type                , "tls::extension::server_certificate_type" },
  std::pair<tls_extension, std::string_view>{ tls_extension::padding                                , "tls::extension::padding" },
  std::pair<tls_extension, std::string_view>{ tls_extension::encrypt_then_mac                       , "tls::extension::encrypt_then_mac" },
  std::pair<tls_extension, std::string_view>{ tls_extension::extended_master_secret                 , "tls::extension::extended_master_secret" },
  std::pair<tls_extension, std::string_view>{ tls_extension::token_binding                          , "tls::extension::token_binding" },
  std::pair<tls_extension, std::string_view>{ tls_extension::cached_info                            , "tls::extension::cached_info" },
  std::pair<tls_extension, std::string_view>{ tls_extension::tls_lts                                , "tls::extension::tls_lts" },
  std::pair<tls_extension, std::string_view>{ tls_extension::compress_certificate                   , "tls::extension::compress_certificate" },
  std::pair<tls_extension, std::string_view>{ tls_extension::record_size_limit                      , "tls::extension::record_size_limit" },
  std::pair<tls_extension, std::string_view>{ tls_extension::pwd_protect                            , "tls::extension::pwd_protect" },
  std::pair<tls_extension, std::string_view>{ tls_extension::pwd_clear                              , "tls::extension::pwd_clear" },
  std::pair<tls_extension, std::string_view>{ tls_extension::password_salt                          , "tls::extension::password_salt" },
  std::pair<tls_extension, std::string_view>{ tls_extension::ticket_pinning                         , "tls::extension::ticket_pinning" },
  std::pair<tls_extension, std::string_view>{ tls_extension::tls_cert_with_extern_psk               , "tls::extension::tls_cert_with_extern_psk" },
  std::pair<tls_extension, std::string_view>{ tls_extension::delegated_credential                   , "tls::extension::delegated_credential" },
  std::pair<tls_extension, std::string_view>{ tls_extension::session_ticket                         , "tls::extension::session_ticket" },
  std::pair<tls_extension, std::string_view>{ tls_extension::tlmsp                                  , "tls::extension::tlmsp" },
  std::pair<tls_extension, std::string_view>{ tls_extension::tlmsp_proxying                         , "tls::extension::tlmsp_proxying" },
  std::pair<tls_extension, std::string_view>{ tls_extension::tlmsp_delegate                         , "tls::extension::tlmsp_delegate" },
  std::pair<tls_extension, std::string_view>{ tls_extension::supported_ekt_ciphers                  , "tls::extension::supported_ekt_ciphers" },
  std::pair<tls_extension, std::string_view>{ tls_extension::pre_shared_key                         , "tls::extension::pre_shared_key" },
  std::pair<tls_extension, std::string_view>{ tls_extension::early_data                             , "tls::extension::early_data" },
  std::pair<tls_extension, std::string_view>{ tls_extension::supported_versions                     , "tls::extension::supported_versions" },
  std::pair<tls_extension, std::string_view>{ tls_extension::cookie                                 , "tls::extension::cookie" },
  std::pair<tls_extension, std::string_view>{ tls_extension::psk_key_exchange_modes                 , "tls::extension::psk_key_exchange_modes" },
  std::pair<tls_extension, std::string_view>{ tls_extension::certificate_authorities                , "tls::extension::certificate_authorities" },
  std::pair<tls_extension, std::string_view>{ tls_extension::oid_filters                            , "tls::extension::oid_filters" },
  std::pair<tls_extension, std::string_view>{ tls_extension::post_handshake_auth                    , "tls::extension::post_handshake_auth" },
  std::pair<tls_extension, std::string_view>{ tls_extension::signature_algorithms_cert              , "tls::extension::signature_algorithms_cert" },
  std::pair<tls_extension, std::string_view>{ tls_extension::key_share                              , "tls::extension::key_share" },
  std::pair<tls_extension, std::string_view>{ tls_extension::transparency_info                      , "tls::extension::transparency_info" },
  std::pair<tls_extension, std::string_view>{ tls_extension::connection_id_deprecated               , "tls::extension::connection_id_deprecated" },
  std::pair<tls_extension, std::string_view>{ tls_extension::connection_id                          , "tls::extension::connection_id" },
  std::pair<tls_extension, std::string_view>{ tls_extension::external_id_hash                       , "tls::extension::external_id_hash" },
  std::pair<tls_extension, std::string_view>{ tls_extension::external_session_id                    , "tls::extension::external_session_id" },
  std::pair<tls_extension, std::string_view>{ tls_extension::quic_transport_parameters              , "tls::extension::quic_transport_parameters" },
  std::pair<tls_extension, std::string_view>{ tls_extension::ticket_request                         , "tls::extension::ticket_request" },
  std::pair<tls_extension, std::string_view>{ tls_extension::dnssec_chain                           , "tls::extension::dnssec_chain" },
  std::pair<tls_extension, std::string_view>{ tls_extension::sequence_number_encryption_algorithms  , "tls::extension::sequence_number_encryption_algorithms" },
  std::pair<tls_extension, std::string_view>{ tls_extension::rrc                                    , "tls::extension::rrc" },
  std::pair<tls_extension, std::string_view>{ tls_extension::ech_outer_extensions                   , "tls::extension::ech_outer_extensions" },
  std::pair<tls_extension, std::string_view>{ tls_extension::encrypted_client_hello                 , "tls::extension::encrypted_client_hello" },
  std::pair<tls_extension, std::string_view>{ tls_extension::renegotiation_info                     , "tls::extension::renegotiation_info" },
 };
 [[nodiscard]] inline constexpr std::string_view lookup_enum(tls_extension const tls_extension) noexcept {
  auto const it = std::find_if(std::cbegin(TLS_EXTENSION_LOOKUP), std::cend(TLS_EXTENSION_LOOKUP), [&tls_extension](auto const& entry) { return entry.first == tls_extension; });
  if (it == std::cend(TLS_EXTENSION_LOOKUP)) [[unlikely]] {
   return "";
  } else [[likely]] {
   return it->second;
  }
 }
}